 Hi everybody, I'm Laurie. I'm VP of Developer Relations at Lamaindex and I'm here to talk to you today about LamaParse. We're going to be doing a quick and dirty walkthrough of some of LamaParse's enormously great array of features. So let's first talk about how you get into LamaParse, which is you just go to cloud.lamaindex.ai and you log in. There's a parse section and there's a convenient little UI here for you to try out basic parsing. You can see that there is a huge list of options. There's language, there's parsing instructions, there's page separators, prefixes, suffixes. You can choose specific pages of your document to parse. You can set a bounding box. You can skip diagonal text. You can invalidate. You can invalidate your cache or you can avoid caching entirely. There's a whole bunch of stuff you can do. We're going to be talking about those later on in this video. In the meantime, let's just try dragging and dropping a file. In this case, a PDF guide to San Francisco. And we'll hit parse. It takes a little while to parse. But then you get in this version a Markdown set of text giving you Markdown tables, headings, all that kind of stuff showing the contents of the PDF. If you don't want Markdown, just turn off the Markdown mode and you'll instead get text, which includes the original columns and all the rest. So let's go ahead and start. Let's talk about how to use Lama Parse in other ways. Programmatically is how you'll be using Lama Parse most of the time. This exploration by the UI is mainly for getting started. Using it in Python is pretty easy. You set a Lama Cloud API key. You install Lama Parse along with Lama Index Core. And then you bring in Lama Parse. And in this case, Simple Directory Reader. And you create the parser. In this case, we've set the result type to Markdown. You tell Simple Directory Reader to use an extractor for PDFs. You give it the input files. And then you tell it, load data. Then you print your documents. And you'll get your parsed file. You can also use TextView. TypeScript is much the same. You set the same API key. You install TypeScript. You install Lama Index. In this case, Lama Parse is built into Lama Index TS. And you import Lama Parse Reader. Then you create a function that creates the reader. You call reader.loadData with your path. And you get your parsed document. You can also use it via the API. If you don't want to use Python or JavaScript, you can call it directly from the API. This is showing some curl calls. This is how you'd upload a file to start parsing in the first place. So you pass in api.cloud.lamaindex.ai and the API endpoint for parsing. You pass in your API key. You pass in your API key as your authorization bearer. And you pass in a path to your file. You can use this endpoint to check the status of your parsing job. Because parsing can sometimes take a while if it's a very large job. And then you can get the results just like you did in the UI and in JavaScript and Python like we just said. We have full API documentation of... Whoops. I should fix that link. We have full API documentation down here. Showing all of our endpoints. So every single one of them is documented with full examples in curl, Python, all of that kind of stuff. Your full API for all of Lama Cloud is documented here. So now let's look at some examples. In this repo at Lama Parse Examples, we have a huge set of examples of how to use Lama Parse. Let's just go through a couple of them. Before we do that, I wanted to mention how many different types of files we support. I've only been using PDFs because that's our basic type. But we support PDFs. We support all sorts of document types like Word docs, PowerPoints, all sorts of obscure formats that you've never heard of. It can parse images. And it can parse spreadsheets, Excel spreadsheets and a huge array of other types of spreadsheets. So really, Lama Parse can do a whole bunch of parsing of all sorts of document types, not just PDFs. Here's an example of it parsing an Excel file. It's exactly the same as parsing any other file. We've created our parser with an API key. We've told it to give us markdown. We've said load data, this time on an Excel file. And you can see it's given us a beautiful text table of the data in the spreadsheet. The rest of this is about how to build RAG with those documents, which we're not going to be talking about today. Now let's talk about JSON mode. One of the things that you can do with JSON is you can create a JSON file. And what you can do with the API is get JSON back, a JSON document structure representing your parsed document, not just markdown or text. In this case, we are setting up JSON mode using Lama Parse. And we're using the getJSONResults method to get the raw JSON. And we're using the getJSONResults method to get the raw JSON. And we're using the getJSONResults method to get the raw JSON. What we're doing here is we're going to use the fact that the JSON mode contains more metadata than text or markdown would give you. One of the things that the JSON mode gives you is it gives you image objects in the JSON. So we have a function here which looks at our JSON extracted and finds all of the images that are referred to in the JSON. So we have a function here which looks at our JSON extracted and finds all of the images that are referred to in the JSON. And it turns them into image documents, which is Lama Index's way of dealing with multimodal images. You can then create a vector store index that contains both your text nodes and your image text nodes. And you can do query engines that look up across your images. And in this case, what we did was, we went over the image text nodes and we did a query. We attached metadata to each image using an LLM to describe what the image was. So then we got text nodes that said what the images were, and we used that in the index to look stuff up. The next cool thing that you can do with JSON mode is you can use the LLMAParse JSON node parser, which is a built-in from LLMAParse in the Python version. What this does is it parses complex documents with things like tables, and so on. So you can get lots of different types of text and images and stuff like that from the JSON mode into a richer format. Specifically, what it does is you get JSON results like you did before. You can see this is what the JSON result looks like. And then you can see that the JSON results are now in the LLMAParse. You pass that output to the LLMAParse JSON node parser. So we get the nodes from the documents and we pass it to the node parser. What this does is it allows us to give our set of nodes and recursive nodes. So we don't just have the text of the document here. We have table objects that we can then give to our recursive retriever. So a recursive retriever in LLMAP index allows you to do queries across your entire document that if it returns like a table object, instead of just saying, here's the text of the table, it knows that it is a table, and it can look into the table and give you specific answers from that table, which is what it is doing here. It's asking, what is Uber's short term insurance reserves reported in 2022? That answer is living in a table. And our retrieval is able to pull it straight out of the table because of the rich metadata that it has about the tables that it got from JSON mode. Another thing that you can do when you have complex tabular data is you can use, a recursive retriever using the Markdown element node parser, which is what we're doing here. So in this case, what you do is you use LLMAParse with result type equal to Markdown to read some documents. And then you feed those documents to the Markdown element node parser. So you can see us instantiating the node parser here. And then we pass each of these things to the node parser. This allows us to create a query engine for each of these documents that is able to provide rich, again, rich information about the contents of the document, because we have so much more information from LLMAParse than we would have if we just parsed raw text. So that's the first thing that we're going to do. Another feature that you might have seen when we were looking in the GUI at the options is multi-language support. OCR and parsing over non-English languages is often quite fraught because of different character sets and things like that. And that is what this feature is intended to take care of. So in this case, you can say LLMAParse with the result type text and the language is French. Parsing a French document, you get, you know, accents and things like that that you would not otherwise get because LLMAParse knows what language it's working in. And the final feature that I want to talk about today is parsing instructions. Parsing instructions are an incredibly rich feature. Basically, parsing instructions allow you to tell LLMAParse what kind of document it's looking at before it parses it. So in this case, it's done. We've downloaded a manga, a comic book. And we're parsing it with, in this example, we're parsing it without parsing instructions. And you get really weird results because manga's in, you know, it's got these big boxes that have text in balloons for it. And it reads right to left instead of left to right. So instead, you create some parsing instructions. The provided document is a manga, comic book. Most pages do not have a title. It does not contain tables. Try to reconstruct the dialogue. And you pass those parsing instructions as a parameter to LLMAParse when you're instantiating it. And suddenly, it knows what it's looking at. It tells you, you know, it gives you the dialogue in the right order. And it can also do other stuff like it can parse math. This manga happens to be about math. So we don't have to go and find another PDF about math. But as you can see here, it has a bunch of comments. It says, you know, you can do complex equations with mathematical notation. And you can give it the instruction that you should output any math equations in LaTeX Markdown. Because our parser knows what LaTeX is. And here you get your equations turned into into LaTeX instructions here. This is without instructions. You get, it does its best. But it's, you know, it's obviously converting math into text as best that it can. But this is full LaTeX that renders out perfectly. This is a rendered version of our LaTeX instructions parsed out of the manga. As you can see, it looks almost exactly the same as the original manga. It's just not in Comic Sans anymore. So that's our top level list of examples of Lama Parse. This has been quick and dirty. But I hope you can see that Lama Parse has a huge body of features and a whole bunch of stuff that you can do. And thanks for your time and attention.