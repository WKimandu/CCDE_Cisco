start	end	text
0.0	18.52	 Hello, everyone. Welcome. We are halfway through Cisco Live, so I hope you are enjoying. And
18.52	23.36	 I hope you are in the right session because in this session I will be talking about infrastructure
23.36	27.76	 as code and how we can utilize Flask with it.
27.76	32.04	 Let's take a quick look at our agenda today. First, I will be talking about infrastructure
32.04	38.2	 as code workflow. Then we will take a quick look at Ansible and Terraform basics. Then
38.2	44.64	 main topic, right? Flask. I will be talking about Flask and how to use it with infrastructure
44.64	50.92	 as code. You know, we will add it in the infrastructure as code workflow. And at the end of this session,
50.92	56.480000000000004	 I will be talking about two simple scenarios. So let's start with infrastructure as code
56.48	62.839999999999996	 workflow. And in the early days of our carrier, we only had physical appliances, right? We
62.839999999999996	68.08	 built, tested, and deployed the system as a whole, which means that our deployment speed
68.08	74.84	 was really slow. And with the introduction of virtualization, we separated virtual layer
74.84	80.36	 and physical layer, which means that we can create virtual machines, right? Each virtual
80.84	87.84	 machine will have its own deployment cycle. So deployment speed increased. And as you know,
89.36	96.36	 during the containers, with the coming of containers, we divided virtual machines into
98.28	103.88	 multiple containers. So each container will have its own deployment cycle. So overall,
103.88	108.4	 deployment speed even increased. As network engineers or DevOps engineers, we need to
108.44000000000001	113.92	 keep up with these innovations. Why? Because these deployment cycles may require network
113.92	120.12	 configuration, right? How can we do it? That is the real question. And in here, infrastructure
120.12	125.84	 as code comes into the picture. Here you can see a simple workflow for the infrastructure
125.84	131.56	 as code. And we have our coder here, coder, network engineer, or DevOps engineer. He or
131.56	138.56	 she can build the code or build the configuration by using Terraform, Ansible, Python, or other
139.68	145.32	 methods, right? Then this configuration will be uploaded to a version control system. As
145.32	152.32	 name states, version control system will manage the code, right? So if our coder or network
153.28	159.52	 engineer changes the code, version also be changed in the version control system. Then
159.68	165.42000000000002	 this version control system will notify the pipeline orchestrator or pipeline orchestrator
165.42000000000002	171.58	 can pull the data from the version control system. Either way, when version changes,
171.58	177.48000000000002	 pipeline orchestrator will deploy the configuration to the endpoint, right? And at the endpoint,
177.48000000000002	184.48000000000002	 this configuration will be executed. As we discussed, our coder or network engineer can
184.76	189.16	 build the configuration by using Terraform, Ansible, Python, or other methods, but among
189.16	196.16	 these, Terraform and Ansible are really popular. So let's take a quick look at both methods.
196.39999999999998	201.62	 Let's start with Ansible. As you know, Ansible is open source configuration management tool,
201.62	208.62	 and you need to write your Ansible configuration in YAML files. And you can manage a wide range
208.62	213.72	 of systems with it, you know, virtual machines, network devices, cloud resources, right? It's
213.72	218.64	 also agentless, so you don't need to install an agent at the endpoint, but there might
218.64	223.76	 be a Python dependency, so at the endpoint, you might need to install a Python library
223.76	230.36	 or Python itself, right? That is Ansible. Let's quickly check the example here. As you
230.36	237.28	 can see, we have Playbook, and within Playbook, we have Plays. And when I execute this Playbook,
237.28	242.92	 all Plays will be executed from the beginning, which means that initially, if I execute this
242.92	248.44	 Playbook, of course, all Plays will be executed, right? But if I execute this Playbook again,
248.44	255.44	 all steps will be executed again, even though there is no change. And in here, you can see
256.53999999999996	263.03999999999996	 a host line, right, which refers to inventory file. And in this file, I only listed two
263.03999999999996	270.03999999999996	 hosts, N9K1 and N9K2. So if I execute this Playbook, this Playbook will be executed towards
271.04	278.04	 this N9K1 and N9K2 only. So there will be no execution towards N9K3. And here, as you
278.6	284.72	 can see, if you want to execute Ansible, you need to use Ansible Playbook command and with
284.72	290.96000000000004	 your YAML file, right? And as a CLI output, you will see, of course, your Playbook, Tasks,
290.96000000000004	297.96000000000004	 and hosts, but most crucial part is the summary part, where you can see if your configuration
298.88	304.84	 is failed or if there's an unreachable host, you can see in this summary part. Let's continue
304.84	310.96	 with the Terraform. Terraform is really similar to Ansible. It's also open source, right,
310.96	317.96	 but different to YAML. Compared to Ansible, you don't need to use YAML files, but you
318.88	323.79999999999995	 need to write your configuration in H-Harp language, in HCL language. So there might
323.84000000000003	327.32	 be a learning curve there because you need to understand how to write your configuration
327.32	334.32	 in HCLR. And you can also manage a wide range of systems with it, you know, virtual machines,
334.48	339.04	 network devices, cloud resources, right? And actually, Terraform is really popular for
339.04	344.56	 public cloud resources. It's also agentless, so you don't need to install an agent at the
344.56	350.8	 endpoint. Also, you don't have Python dependencies there, but when you execute Terraform, it
350.84000000000003	356.48	 will require a single binary file, which is also called provider file. You need this file
356.48	361.36	 for interacting with endpoints. You know, Terraform needs this file. Let's see Terraform
361.36	368.36	 workflow together. We have our coder again. He or she will create or update code for managing
368.6	374.28000000000003	 the infrastructure, right? He or she will write this Terraform code in HCL language.
375.2	381.59999999999997	 For your initial execution, then you execute Terraform, it will install a provider file
381.59999999999997	387.32	 to local directory, right? Which means that if our coder executes Terraform again, there
387.32	391.44	 will be no installation because you already installed the provider file to local directory.
391.44	397.88	 This is also only for one time installation. Then Terraform will check the code and will
397.88	403.35999999999996	 calculate the resources to be created, right? And it's so straightforward. Then calculated
403.44	412.44	 resources will be deployed to the respective targets. But as I mentioned here, as you can
412.96000000000004	419.96000000000004	 see, resources will be calculated, right? What does this mean? After deploying these
419.96000000000004	425.92	 resources to the respective targets, Terraform will save the configuration to a save state
425.92	432.92	 file. So if our coder changes some part of the code and executes Terraform again, Terraform
432.92	438.76	 again will calculate the resources. Then it will compare these resources to a save
438.76	443.36	 state file, right? Only the difference in the code will be executed. That is the main
443.36	448.84000000000003	 difference between Terraform and Ansible. So when you execute Ansible, it will execute
448.84000000000003	454.64	 all steps from the beginning. But Terraform, it will compare your configuration with the
454.64	461.64	 save state file and difference in the code will be executed. Here you can see a HCL example
461.64	466.64	 as we discussed previously, you need to write your configuration in HCL language and there
466.64	472.64	 might be a learning curve because compared to YAML, it's more like code-like, right?
472.64	481.64	 You need to understand how to write your configuration in HCL. And for Ansible, you need to execute
482.64	487.64	 another command, but for Terraform, you need to execute Terraform apply command, right?
487.64	493.64	 For execution. And in the red text, as you can see, Terraform calculates the resources,
493.64	499.64	 then compares it with the save state. And it says us that one to add, zero to change,
499.64	504.64	 and zero to destroy. It means that our change contains only one resource and it will be
504.64	511.64	 deployed to the endpoint, right? And our main topic, Flask. What is Flask? Flask is
511.64	520.64	 a framework written in Python. You can use Flask for creating simple web applications,
520.64	526.64	 right? You can create a simple GUI or a simple web page, right? And on the left side, you
526.64	532.64	 can see a very simple, minimal application which you can write in Flask and it gives
532.64	538.64	 us a web page or GUI which only says web app with Python Flask, right? It's really simple.
538.64	545.64	 You can create your GUI using Flask. And let's add Flask into infrastructure as code workflow.
545.64	553.64	 Here we have user, right? He or she may not be a coder or network engineer. We are talking
553.64	558.64	 about end user or a common user, right? So we want to, for example, let's say that we
558.64	564.64	 want to give him or her a limited capability to change the configuration. So we can just
564.64	574.64	 create a Flask page which may contain a text box or a button, you know? And this user may
574.64	580.64	 change, for example, VLAN assignment or interface speed, right? We can just give a limited
580.64	587.64	 capability to our common users. Then this user will select what to do from this predefined
587.64	593.64	 options. So this user will be limited to those options. Then based on the request,
593.64	599.64	 related function will be called and executed. But behind the curtain, workflow is the same,
599.64	603.64	 right? We have our coder, network engineer or DevOps engineer who will build the
603.64	609.64	 configuration by using Terraform, Ansible, Python, whatever you imagine. Then this code
609.64	613.64	 or configuration will be uploaded to version control system and version control system will
613.64	617.64	 notify the pipeline orchestrator. So all workflows are the same. What we are doing is
617.64	623.64	 just adding this Flask page for our common users, right? It's really simple. And why we
623.64	629.64	 are doing this? Because as I mentioned or as we discussed previously, our network engineers
629.64	634.64	 or DevOps engineers need to have both networking knowledge and coding knowledge, right? But we
634.64	641.64	 cannot expect the same from our end users. They may not know coding or even networking.
641.64	647.64	 That's why our networking team are getting lots of geratricutes or requests from these users.
647.64	651.64	 If you can upload some of this stuff to end users, then it will be really beneficial for our
651.64	656.64	 teams. For example, let's say on the left side, we are seeing a repetitive test scenario, right?
658.64	666.64	 In here, I'm just showing this for interface speed change or getting the interface speed of the
666.64	673.64	 end user. So this is a fabric. But as I'm using API calls here, you can use whatever you want
673.64	682.64	 because systems currently supporting API, all the systems. And on the right side, as we were
682.64	689.64	 discussing, I'm talking about infrastructure as code scenario. Users can either use Terraform or
689.64	695.64	 Ansible for creating or deleting a tenant, right? So you can upload this kind of stuff to end users.
695.64	701.64	 Actually, let's see the source code of the right scenario, automation scenario. We have only four
701.64	706.64	 buttons, right? Deploy Terraform, undeploy Terraform, deploy Ansible, and undeploy Ansible. Let's see this.
709.64	715.64	 Here, we only have three folders, right? Ansible, automation, and Terraform. Let's see what is
715.64	722.64	 Terraform. It only contains our Terraform files, right? HCL language. So it's for creating a tenant
722.64	728.64	 in Cisco ACI fabric. And Ansible also only contains YAML files for creating and deleting a tenant,
728.64	738.64	 right? So let's check our main logic, automation folder. In here, let's check our HTML page first.
738.64	747.64	 It's really simple. We only have four buttons, right? So whole page contains only a few codes, right?
747.64	752.64	 As you can see here, we only have four buttons, deploy Terraform, undeploy Terraform, deploy Ansible,
752.64	758.64	 and undeploy Ansible. And these values are important because we are calling Python functions with
758.64	765.64	 these values. Let's check our main logic for it. This main logic is automation.py. And when I click it,
765.64	775.64	 as you can see, we are running Flask here. And it's rendering index.html, which we were looking
775.64	784.64	 previously, right? This four button page. And on the bottom, we are assigning a custom port. So if I
784.64	792.64	 access this URL with this custom port, I can see my GUI, right? Flask GUI. And let's see the logic,
792.64	801.64	 main logic. And it's really simple. If I click a button and click button is deploy Terraform, then it will
801.64	809.64	 call Terraform under bar deploy function. What is this function? This function is Terraform under bar deploy.py
809.64	816.64	 Python file. And it's really simple. I'm just using Python under bar Terraform library. And it's just
816.64	824.64	 calling Terraform apply within Python. And it's calling Terraform apply for this Terraform folder. So it will
824.64	834.64	 create a tenant or destroy a tenant, right? Let's see another one. Let's see for Ansible. Again, if a button
834.64	844.64	 is clicked and click button is deploy Ansible, it will call Ansible under bar deploy, which is this Ansible
844.64	853.64	 under bar deploy Python file. And it's using Ansible under bar runner library. And it's executing this create
853.64	861.64	 under bar tenant that we saw earlier in the Ansible folder, right? It's really simple. And you can also add
861.64	868.64	 a protective logic. For example, our end users may not understand, right? They can click a button twice or maybe
868.64	873.64	 they deploy a tenant with Terraform and try to deploy it with Ansible also. You can add those kinds of
873.64	884.64	 protective logic, which is a checker.py file. Let's see this source code in action. Here at the background,
884.64	891.64	 you are seeing a Cisco ACI APIC GUI. And we only have three tenants, right? Common, infrared management.
891.64	900.64	 Let's create another tenant with it. And let's try to execute our script first. As I mentioned previously, we will
900.64	908.64	 execute this automation.py. And when I execute it, it will give me a URL containing my custom port, right?
908.64	918.64	 If I access this URL, I can access my Flask GUI. And when I access it, as you can see here, we only have four buttons,
918.64	926.64	 deploy Terraform, undeploy Terraform, deploy Ansible, and undeploy Ansible. So let's click this deploy Terraform.
926.64	934.64	 When I click this deploy Terraform at the background, it's executing Terraform apply, right? Calculating resources and
934.64	942.64	 sending these API calls to the Cisco ACI. And when we check the APIC GUI, as you can see here, we created a tenant, right?
942.64	950.64	 And at the background, it's creating application profile, EPGs, bridge domains, and VRF for this tenant, right?
950.64	960.64	 Calculating and sending these requests to the Cisco ACI itself. And as you can see here, 42 resources I created.
960.64	969.64	 Let's try this protective logic. Let's click this deploy Terraform again. It checked and said us that it's already deployed.
969.64	978.64	 But when we check the CLI, this post request was sent to Flask, but our protective logic prevented Terraform apply execution.
978.64	988.64	 Let's delete this Terraform under our tenant. Let's click undeploy Terraform. When I click undeploy Terraform, it will execute Terraform destroy.
988.64	1000.64	 At the background, and 42 resources are deleted. Let's check APIC GUI. As you can see here, fourth tenant is deleted. We only have three tenants.
1001.64	1009.64	 Let's exit this one. You can exit with Ctrl C and let's execute another repetitive task scenario.
1009.64	1022.64	 And I gave this one another custom port, so we will access it via another URL. And also you can execute your Python calls at the background using Nohub, right?
1022.64	1031.6399999999999	 And if you want to check the process ID of your script, you can execute PS command by gripping it, you know, your script name. It's simple stuff.
1031.6399999999999	1041.6399999999999	 And you can see your, you know, scripts or process parent PID. Let's access another URL.
1041.64	1061.64	 As you can see here, this is a repetitive test scenario and users can get interface speed, configure interface speed either 1 gigabit or 100 megabit or do, you know, their repetitive test scenario, right?
1061.64	1074.64	 This is simple stuff. So when I click 100 M, it changes the interface speed to 100 megabit. When I click 1 gigabit, it changes to 1 gigabit. And when I click what is current speed button, it just gives me the interface speed, right?
1074.64	1082.64	 So I'm just using get or post API calls so you can do whatever you want with these ones. It's really simple.
1082.64	1097.64	 And if you want to, you know, exit or delete this process, you can just apply a kill command and give them the parent PID of the script itself.
1097.64	1110.64	 And lastly, you can reach a repository of these both scripts from this GitHub page and you can contact me with this Twitter account handle, right?
1110.64	1123.64	 And before finishing, if you can fill out the service, it will be really helpful for us for hearing your feedback. And with this, we are at the end of the session. Thanks a lot for your attention.
1127.64	1130.64	 Thank you.
